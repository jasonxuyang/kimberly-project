// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String     @unique
  password  String
  student   Student?
  assistant Assistant?
  professor Professor?
}

model Student {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  classes  Class[]  @relation(fields: [classIds], references: [id])
  classIds String[] @db.ObjectId
}

model Assistant {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  classes  Class[]  @relation(fields: [classIds], references: [id])
  classIds String[] @db.ObjectId
}

model Professor {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  classes  Class[]  @relation(fields: [classIds], references: [id])
  classIds String[] @db.ObjectId
}

model Class {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  professors   Professor[] @relation(fields: [professorIds], references: [id])
  professorIds String[]    @db.ObjectId
  assistants   Assistant[] @relation(fields: [assistantIds], references: [id])
  assistantIds String[]    @db.ObjectId
  students     Student[]   @relation(fields: [studentIds], references: [id])
  studentIds   String[]    @db.ObjectId
  posts        Post[]
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String    @db.ObjectId
  authorRole Role
  title      String
  content    String
  datePosted DateTime  @default(now())
  comments   Comment[]
  class      Class     @relation(fields: [classId], references: [id])
  classId    String    @db.ObjectId
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  datePosted DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @unique @db.ObjectId
}

enum Role {
  STUDENT
  TA
  PROFESSOR
}
