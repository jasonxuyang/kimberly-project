// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String     @unique
  password  String
  student   Student?
  assistant Assistant?
  professor Professor?
  posts     Post[]

  @@unique([id, firstName, lastName])
}

model Student {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId, userFirstName, userLastName], references: [id, firstName, lastName])
  userId        String   @unique @db.ObjectId
  userFirstName String
  userLastName  String
  courses       Course[] @relation(fields: [courseIds], references: [id])
  courseIds     String[] @db.ObjectId

  @@unique([userId, userFirstName, userLastName])
}

model Assistant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId, userFirstName, userLastName], references: [id, firstName, lastName])
  userId        String   @unique @db.ObjectId
  userFirstName String
  userLastName  String
  courses       Course[] @relation(fields: [courseIds], references: [id])
  courseIds     String[] @db.ObjectId

  @@unique([userId, userFirstName, userLastName])
}

model Professor {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId, userFirstName, userLastName], references: [id, firstName, lastName])
  userId        String   @unique @db.ObjectId
  userFirstName String
  userLastName  String
  courses       Course[] @relation(fields: [courseIds], references: [id])
  courseIds     String[] @db.ObjectId

  @@unique([userId, userFirstName, userLastName])
}

model Course {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  professors   Professor[] @relation(fields: [professorIds], references: [id])
  professorIds String[]    @db.ObjectId
  assistants   Assistant[] @relation(fields: [assistantIds], references: [id])
  assistantIds String[]    @db.ObjectId
  students     Student[]   @relation(fields: [studentIds], references: [id])
  studentIds   String[]    @db.ObjectId
  posts        Post[]
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User?    @relation(fields: [userId, userFirstName, userLastName], references: [id, firstName, lastName])
  userId        String?  @unique @db.ObjectId
  userFirstName String?
  userLastName  String?
  userRole      Role?
  title         String
  content       String
  datePosted    DateTime @default(now())
  course        Course?  @relation(fields: [courseId], references: [id])
  courseId      String?  @db.ObjectId
  parent        Post?    @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String   @unique @db.ObjectId
  children      Post[]   @relation("ParentChildren")
}

enum Role {
  STUDENT
  TA
  PROFESSOR
}
